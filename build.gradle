buildscript {
    repositories {
        jcenter()
        maven {
            url 'https://plugins.gradle.org/m2/'
        }
	}
	dependencies {
        classpath "com.palantir:gradle-baseline-java:${baselineVersion}"
        classpath "com.palantir:jacoco-coverage:${jacocoCoverageVersion}"
        classpath "gradle.plugin.com.palantir.gradle.docker:gradle-docker:${gradleDockerVersion}"
        classpath "gradle.plugin.com.palantir.gradle.javadist:gradle-java-distribution:${gradleJavaDistVersion}"
        classpath "gradle.plugin.org.inferred:gradle-processors:${gradleProcessorsVersion}"
        classpath "gradle.plugin.com.palantir.gradle.gitversion:gradle-git-version:${gradleGitVersionVersion}"
        classpath "org.unbroken-dome.gradle-plugins:gradle-testsets-plugin:${gradleTestSetsVersion}"
    }
}

apply plugin: 'com.palantir.baseline-config'
apply plugin: 'java'
apply plugin: 'org.inferred.processors'
apply plugin: 'com.palantir.baseline-idea'
apply plugin: 'com.palantir.baseline-eclipse'
apply plugin: 'com.palantir.jacoco-coverage'
apply plugin: 'com.palantir.jacoco-full-report'
apply plugin: "com.palantir.git-version"

allprojects {

    repositories {
        jcenter()
        mavenCentral()
    }

    group = 'org.drausin.bitflow'
    version gitVersion()

    configurations.all {
        exclude module: 'slf4j-log4j12'
        resolutionStrategy {
            failOnVersionConflict()
            force "ch.qos.logback:logback-classic:${logbackVersion}"
            force "ch.qos.logback:logback-core:${logbackVersion}"
            force "com.fasterxml.jackson.core:jackson-annotations:${jacksonVersion}"
            force "com.fasterxml.jackson.core:jackson-core:${jacksonVersion}"
            force "com.fasterxml.jackson.core:jackson-databind:${jacksonVersion}"
            force "com.fasterxml.jackson.dataformat:jackson-dataformat-yaml:${jacksonVersion}"
            force "com.fasterxml.jackson.datatype:jackson-datatype-guava:${jacksonVersion}"
            force "com.fasterxml.jackson.datatype:jackson-datatype-jdk7:${jacksonVersion}"
            force "com.fasterxml.jackson.datatype:jackson-datatype-joda:${jacksonVersion}"
            force "com.fasterxml.jackson.module:jackson-module-scala_2.10:${jacksonVersion}"
            force "com.fasterxml.jackson.jaxrs:jackson-jaxrs-json-provider:${jacksonVersion}"
            force "com.fasterxml.jackson.jaxrs:jackson-jaxrs-base:${jacksonVersion}"
            force "com.google.code.findbugs:jsr305:${jsr305Version}"
            force "com.google.code.gson:gson:${gsonVersion}"
            force "com.google.guava:guava:${guavaVersion}"
            force "com.netflix.feign:feign-core:${feignVersion}"
            force "com.netflix.feign:feign-jackson:${feignVersion}"
            force "com.netflix.feign:feign-jaxrs:${feignVersion}"
            force "com.netflix.feign:feign-okhttp:${feignVersion}"
            force "com.squareup.okhttp:okhttp:${okhttpVersion}"
            force "commons-io:commons-io:${commonsIoVersion}"
            force "io.netty:netty-all:${nettyAllVersion}"
            force "io.netty:netty:${nettyVersion}"
            force "org.eclipse.jetty:jetty-server:${jettyVersion}"
            force "org.eclipse.jetty:jetty-util:${jettyVersion}"
            force "org.eclipse.jetty:jetty-http:${jettyVersion}"
            force "org.eclipse.jetty:jetty-io:${jettyVersion}"
            force "org.eclipse.jetty:jetty-webapp:${jettyVersion}"
            force "org.eclipse.jetty:jetty-servlet:${jettyVersion}"
            force "org.eclipse.jetty:jetty-continuation:${jettyVersion}"
            force "javax.servlet:javax.servlet-api:${javaxServletVersion}"
            force "jline:jline:${jlineVersion}"
            force "joda-time:joda-time:${jodaTimeVersion}"
            force "junit:junit:${junitVersion}"
            force "org.apache.avro:avro:${avroVersion}"
            force "org.apache.commons:commons-lang3:${commonsLang3Version}"
            force "org.apache.commons:commons-math3:${commonsMath3Version}"
            force "org.apache.curator:curator-client:${curatorVersion}"
            force "org.apache.curator:curator-framework:${curatorVersion}"
            force "org.apache.httpcomponents:httpclient:${httpClientVersion}"
            force "org.apache.httpcomponents:httpcore:${httpCoreVersion}"
            force "org.bitcoinj:bitcoinj-core:${bitcoinjVersion}"
            force "org.objenesis:objenesis:${objenesisVersion}"
            force "org.hamcrest:hamcrest-core:${hamcrestVersion}"
            force "org.slf4j:jcl-over-slf4j:${slf4jVersion}"
            force "org.slf4j:slf4j-api:${slf4jVersion}"
            force "org.xerial.snappy:snappy-java:${snappyVersion}"

            // force these versions
            force "commons-codec:commons-codec:${commonsCodecVersion}"
            force "commons-lang:commons-lang:${commonsLangVersion}"
            force "commons-logging:commons-logging:${commonsLoggingVersion}"
            force "org.apache.logging.log4j:log4j-core:${log4jVersion}"
            force "org.codehaus.jackson:jackson-core-asl:${codehausJacksonVersion}"
            force "org.codehaus.jackson:jackson-jaxrs:${codehausJacksonVersion}"
            force "org.codehaus.jackson:jackson-mapper-asl:${codehausJacksonVersion}"
            force "org.codehaus.jackson:jackson-xc:${codehausJacksonVersion}"
            force "org.slf4j:slf4j-log4j12:${slf4jLog4jVersion}"
        }
    }

    apply from: "$rootDir/gradle/idea.gradle"
}

subprojects {
    sourceCompatibility = '1.8'
    targetCompatibility = '1.8'
}

jacocoCoverage {
    reportThreshold 0.8
}

// Code coverage
evaluationDependsOnChildren() // needed to collect all Test tasks of subprojects
jacocoFullReport {
    dependsOn << allprojects.collect { it.tasks.withType(JacocoReport).findAll { it != jacocoFullReport } }

    // Ignore Immutables-generated code from coverage checks
    afterEvaluate {
        classDirectories = files(classDirectories.files.collect {
            // Exclusion path is project-relative and has a base of compiled classes
            fileTree(dir: it, excludes: [
                    '**/Immutable*.class',  // Immutable* classes are usually generated
                    '**/*MixIn.class'       // *MixIn classes usually have trivial method implementations
            ])
        })
    }
}
