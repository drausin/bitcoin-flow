// =============
// IDEA Settings
// =============
apply plugin: "idea"

// -----------------------------------------
// Set Java Version in the Project + Modules
// -----------------------------------------
idea {

    if (project != null) {
        project {
            languageLevel = javaVersion
            ipr {
                withXml {
                    def annotationProfile = it.asNode().component.find { it.@name == 'CompilerConfiguration' }
                            .annotationProcessing.profile
                    annotationProfile.sourceOutputDir.@name = 'build/classes/main'
                    annotationProfile.sourceTestOutputDir.@name = 'build/classes/test'
                }
            }
        }
    }

    module {
        downloadJavadoc = true
        downloadSources = true
        inheritOutputDirs = true
        inheritOutputDirs = true

        excludeDirs -= file("${buildDir}")
        excludeDirs += file("${buildDir}/dependency-cache")
        excludeDirs += file("${buildDir}/distributions")
        excludeDirs += file("${buildDir}/integrationTests")
        excludeDirs += file("${buildDir}/integrationTests-results")
        excludeDirs += file("${buildDir}/jacoco")
        excludeDirs += file("${buildDir}/libs")
        excludeDirs += file("${buildDir}/reports")
        excludeDirs += file("${buildDir}/resources")
        excludeDirs += file("${buildDir}/test-results")
        excludeDirs += file("${buildDir}/tmp")

        sourceDirs = [file("src/main/java"), file("src/main/resources"), file("${buildDir}/classes/main")] as Set
        testSourceDirs = [file("src/test/java"), file("src/test/resources"), file("${buildDir}/classes/test")] as Set
        ext.set('generatedSourceDirs', [])
        generatedSourceDirs += file("${buildDir}/classes/main")
        generatedSourceDirs += file("${buildDir}/classes/test")

        iml {
            withXml {
                def rootManager = it.asNode().component.find { it.@name == 'NewModuleRootManager' }
                rootManager.@LANGUAGE_LEVEL = jdkVersion
            }
            whenMerged { module ->
                module.dependencies.findAll { it.scope == 'TEST' }*.exported = true
            }
        }
    }
}